// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TronGame.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GameLogicFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GameLogic.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameLogic", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "GameLogic")))
            {
                TronGame.Tests.GameLogicFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Correct File Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameLogic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void CorrectFileFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correct File Format", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a file named \'commands.txt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("The content of the file is \'Player1,Red;Player2,Blue|Player1:U,Player2:D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I parse the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Players",
                        "Commands"});
            table1.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:U"});
            table1.AddRow(new string[] {
                        "Player2 Blue",
                        "Player2:D"});
#line 11
 testRunner.Then("the result should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Collide with itself")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameLogic")]
        public virtual void CollideWithItself()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collide with itself", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Command"});
            table2.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table2.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table2.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:L"});
            table2.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:U"});
#line 17
 testRunner.Given("The commands are given in the file are", ((string)(null)), table2, "Given ");
#line 23
 testRunner.When("I execute the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("the loser should be \'Player1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Collide with oponent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameLogic")]
        public virtual void CollideWithOponent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collide with oponent", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Command"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
            table3.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:D"});
#line 27
 testRunner.Given("The commands are given in the file are", ((string)(null)), table3, "Given ");
#line 47
 testRunner.When("I execute the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the loser should be \'Player1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Tie")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GameLogic")]
        public virtual void Tie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tie", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Command"});
            table4.AddRow(new string[] {
                        "Player1 Red",
                        "Player1:R"});
            table4.AddRow(new string[] {
                        "Player2 Blue",
                        "Player2:U"});
#line 51
 testRunner.Given("The commands are given in the file are", ((string)(null)), table4, "Given ");
#line 55
 testRunner.When("I execute the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("the loser should be \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
